This is an archive of the individual commits between 0.1 and 0.2 which were
squashed before merging into the master branch. Most of the squashed commits
are referred to from f9951f337617e8b1ffb0290cdc433547c4278ebc.

Below is the original text of the README file.

================================================================================
POTATO is (almost) a Scheme interpreter written in C for fun and learning in my spare time.

`make' to build
`make clean' to cleanup

`./potato' to run
`./potato [filename]' to execute a file

Details
 * assertions

Horizon
 * second-level POTATO
 * debugger for second+ levels of POTATO
 * reflexive interpreter (second->first level)
 * modes of operation (see below)
   * garbage-collected bytecode interpreter
 * compiler for second level

Long-term
 * support for floating-point
 * module system for libraries

Useful
 * better memory management
  * intern objects
 * better error handling
 * better error abstractions (error type, stack-unwind)
 * better layout of code
 * documentation
 * tests
 * errors print themselves?

POTATO modes of operation:
 1. Diced: Debug - for development
  a. (default) - standard debugging utilities, tracebacks, assertions
  b. Minced: trace - expression-by-expression execution
 2. Baked: Fast interpreted - for rapid update/deployment, most applications
  - removal of assertions, most debugging information
  - higher-level constructs and introspection still supported
  - modifiable runtime
 3. Mashed: JIT compiled - for speed-sensitive, fast apps
  - runs on bytecode interpreter
  - higher-level constructs will be transformed at compile-time to lower-level
  - only lower-level constructs can be introduced at runtime
    - must call to interpreter to run higher-level constructs
  - embeddable within interpreter
 4. Full compiled - most likely unnecessary

(1) planned to be strong-typed