;;; Test code

;(print 'program-arguments)
;(print program-arguments)

;(define opaque-stream (c-fopen "test.pot" "r"))
;(print (c-fgetc opaque-stream))
;(c-fclose opaque-stream)

;;; Logic and comparators

(define not
  (func (pred)
    (if pred
	nil
	'true)))

(define and ; TODO short-circuit
  (func (p1 p2)
    (if p1
	(if p2 p2 nil)
	nil)))

(define or ; TODO short-circuit
  (func (p1 p2)
    (if p1
	p1
	(if p2 p2 nil))))
    
(define >
  (func (a b)
    (< b a)))

(define <=
  (func (a b)
    (or (< a b) (= a b))))

(define >=
  (func (a b)
    (or (> a b) (= a b))))

;;; List utils

(define length
  (func (list)
    (if list
	(+ 1 (length (rest list)))
	0)))

;;; I/O

(define format
  (func (str dest)
    (define vector (vector-from-string str))
    (define vector-len (vector-length vector))
    (define print-char-at
      ;; prints character at index
      (func (vector index)
	(c-putc dest (vector-index vector index))))
    (define format-recur
      (func (vector index)
	(if (>= index vector-len)
	    str
	    ((func ()
	       (print-char-at vector index)
	       (format-recur vector (+ index 1)))))))
    (format-recur vector 0)))

;;; Main code

(define repl
  (func ()
    ;(format "> " sys-stdout)
    (print (eval (read)))
    (repl)))

(if (= 1 (length program-arguments))
    (repl)
    (load (first (rest program-arguments))))
